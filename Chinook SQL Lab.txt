
-- 2.1 SELECT
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE WHERE FIRSTNAME='Andrew' AND REPORTSTO IS NULL;

-- 2.2 ORDER BY
SELECT * FROM ALBUM ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

--2.3 INSERT INTO
INSERT INTO GENRE(GENREID, NAME) VALUES (26, 'KPop');
INSERT INTO GENRE(GENREID, NAME) VALUES (27, 'JPop');

INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) 
VALUES (9, 'A', 'A', 'A', 2, TO_DATE('1973-8-29 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2002-4-1 00:00:00','yyyy-mm-dd hh24:mi:ss'), '1111 6 Ave SW', 'Calgary', 'AB', 'Canada', 'T2P 5M5', '+1 (403) 262-3443', '+1 (403) 262-6712', 'jane@chinookcorp.com');
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) 
VALUES (10, 'B', 'B', 'Bt', 2, TO_DATE('1973-8-29 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2002-4-1 00:00:00','yyyy-mm-dd hh24:mi:ss'), '1111 6 Ave SW', 'Calgary', 'AB', 'Canada', 'T2P 5M5', '+1 (403) 262-3443', '+1 (403) 262-6712', 'jane@chinookcorp.com');

INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, Country, PostalCode, Phone, Email, SupportRepId) 
VALUES (60, 'fas', 'ter', 'bobby 34', 'rev', 'ature', '21174', '23234234', 'cool', 5);
INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, Country, PostalCode, Phone, Email, SupportRepId) 
VALUES (62, 'slo', 'wer', 'lol 72', 'res', 'ton', '32412', '234wrwer', 'email', 5);


--2.4 UPDATE
UPDATE CUSTOMER SET LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron';
UPDATE CUSTOMER SET FIRSTNAME = 'Robert' WHERE FIRSTNAME = 'Aaron';

UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';


--2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('2003-6-1 00:00:00','yyyy-mm-dd hh24:mi:ss') AND TO_DATE('2004-3-1 00:00:00','yyyy-mm-dd hh24:mi:ss');


--2.7 DELETE
DELETE FROM INVOICELINE WHERE INVOICEID IN
(SELECT INVOICEID FROM INVOICE WHERE CUSTOMERID IN 
(SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'));

DELETE FROM INVOICE WHERE CUSTOMERID IN 
(SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter');

DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter' ;

--3.0 SQL FUNCTIONS

--3.1 SYSTEM DEFINED FUNCTIONS
SELECT SYSTIMESTAMP FROM DUAL;
SELECT LENGTH(NAME) FROM MEDIATYPE;

--3.2
SELECT AVG(TOTAL) FROM INVOICE;
SELECT MAX(UNITPRICE) FROM TRACK;

--3.3    
CREATE OR REPLACE FUNCTION AVGPRICE(IID IN NUMBER)--TAKES IN IID
    RETURN NUMBER AS AVG_PRICE NUMBER;--RETURNS A NUMBER AVG PRICE
    BEGIN DECLARE--DELCARE VARIABLES START
        TOTALTRACKS NUMBER; 
        TOTALPRICE NUMBER;
        CURRENTVALUE NUMBER;
        BEGIN--BEGIN METHOD
            SELECT COUNT(INVOICEID) INTO TOTALTRACKS FROM INVOICELINE WHERE INVOICEID = IID;
            SELECT TOTAL INTO TOTALPRICE FROM INVOICE WHERE INVOICEID = IID;
            AVG_PRICE := TOTALPRICE/TOTALTRACKS;
            RETURN AVG_PRICE;
        END;
    END;
/
SELECT AVGPRICE(100) FROM DUAL;

--3.4
CREATE OR REPLACE FUNCTION OLDER
    RETURN SYS_REFCURSOR AS CURS SYS_REFCURSOR;
    BEGIN 
        OPEN CURS 
            FOR SELECT FIRSTNAME FROM EMPLOYEE WHERE BIRTHDATE > '31-DEC-68' ;
        RETURN CURS;
    END;
/

SELECT OLDER FROM DUAL;

--4.1
CREATE OR REPLACE PROCEDURE SELECTEMPLOYEE(
     CURS OUT SYS_REFCURSOR)
    AS BEGIN 
        OPEN CURS
            FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
        
    END;
/

VAR mycursor REFCURSOR;
EXECUTE SELECTEMPLOYEE(:mycursor);
PRINT mycursor ;

--4.2
CREATE OR REPLACE PROCEDURE UPDATEEMPLOYEE(
    EID NUMBER)
    AS BEGIN
        UPDATE EMPLOYEE SET EMPLOYEE.ADDRESS = 'COMPANY' WHERE EMPLOYEE.EMPLOYEEID = EID;
    END;
/
CALL UPDATEEMPLOYEE(10);

CREATE OR REPLACE PROCEDURE BOSS(
    EID NUMBER,
    CURS OUT SYS_REFCURSOR)
    AS BEGIN 
        OPEN CURS FOR
            SELECT FIRSTNAME FROM EMPLOYEE 
            WHERE (EMPLOYEEID = (SELECT REPORTSTO FROM EMPLOYEE WHERE EMPLOYEEID = EID));
    END;
/

--4.3
CREATE OR REPLACE PROCEDURE CUSTINFO(
    CID NUMBER,
    CURS OUT SYS_REFCURSOR)
    AS BEGIN 
        OPEN CURS FOR
            SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER 
            WHERE (CUSTOMERID = CID);
    END;
/


--5.0
CREATE OR REPLACE PROCEDURE DELETEINVOICE(
    IID NUMBER)
    AS BEGIN 
        DELETE FROM INVOICELINE WHERE INVOICEID = IID ;
        DELETE FROM INVOICE WHERE INVOICEID = IID;
    END;
/
COMMIT WORK;

CREATE OR REPLACE PROCEDURE INSERTCUST(
    CID NUMBER,
    FIRSTN VARCHAR,
    LASTN VARCHAR,
    ADDR VARCHAR,
    CITY VARCHAR,
    COUNTRY VARCHAR,
    POSTAL VARCHAR,
    PHONE VARCHAR,
    EMAIL VARCHAR,
    REPID NUMBER)
    AS BEGIN
        INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, Country, PostalCode, Phone, Email, SupportRepId) 
        VALUES (CID, FIRSTN, LASTN, ADDR, CITY, COUNTRY, POSTAL, PHONE, EMAIL, REPID);
        COMMIT WORK;
    END;
/
CALL INSERTCUST(63, 'ASFAS', 'SADSADAS', 'SAFASFAF', 'HAAGASF', 'ASGAGASFA', '02401', '124125124', 'ASFSDASDAS', 5); 

--6.1
SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER AFTERNEWEMPLOYEE AFTER 
    INSERT ON CUSTOMER 
    BEGIN
        dbms_output.put_line('CREATED'); 
    END;
/
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) 
    VALUES(70, 'ASFASF', 'ASAFAFSAF', 'ASFASFAS');
    
SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER AFTERUPDATEALBUM AFTER 
    UPDATE ON ALBUM 
    BEGIN
        dbms_output.put_line('UPDATED'); 
    END;
/
UPDATE ALBUM SET TITLE = 'Volume Dois' WHERE ALBUMID = 225; 

SET SERVEROUTPUT ON
CREATE OR REPLACE TRIGGER AFTERDELETECUSTOMER AFTER 
    DELETE ON CUSTOMER 
    BEGIN
        dbms_output.put_line('DELETED'); 
    END;
/
DELETE FROM CUSTOMER WHERE CUSTOMERID = 68;

--7.1
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER INNER JOIN INVOICE ON (CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID);


--7.2
SELECT FIRSTNAME, LASTNAME, INVOICEID
FROM CUSTOMER LEFT JOIN INVOICE ON (CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID);

--7.3
SELECT ARTIST.NAME, ALBUM.TITLE 
FROM ARTIST RIGHT JOIN ALBUM ON (ARTIST.ARTISTID=ALBUM.ARTISTID);

--7.4
SELECT * FROM ALBUM CROSS JOIN ARTIST ORDER BY ARTIST.NAME ASC;

--7.5
SELECT * FROM EMPLOYEE E1 JOIN EMPLOYEE E2 ON E1.REPORTSTO = E2.EMPLOYEEID;
